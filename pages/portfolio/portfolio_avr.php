<h1> <div class="title">
        <a href="<?php echo $PATH;?>portfolio/avr" > AVR Assembly / C / C++ </a>
</div></h1>

<div class="entry">
    <div class="title"><i> TKN - (Η διπλωματική μου εργασία) </i>:</div>

    <img class="rightfloat" src="<?php echo $this->IMAGE_PATH; ?>TKN.png" border="0" onclick="showImage(this.src);" >

    <p>
    Στην παρούσα διπλωματική εργασία σχεδιάστηκε και υλοποιήθηκε ένα δίκτυο πραγματικού χρόνου με σκοπό την διασύνδεση μιας ομάδας μικροελεγκτών και στην συνέχεια, βασισμένος στο δίκτυο, αναπτύχθηκε ένας δικτυακός bootloader για μικροελεγκτές AVR.
    </p>

    <p>
    Στο φυσικό επίπεδο του δικτύου (OSI 1) γίνεται χρήση της τυπικής σειριακής θύρας UART για την φυσική διασύνδεση των κόμβων σε τοπολογία δακτυλίου. Η επιλογή αυτή έγινε γιατί οι θύρες UART είναι διαδεδομένες τόσο στους προσωπικούς υπολογιστές, όσο και στις περισσότερες οικογένειες μικροελεγκτών, γεγονός που επιτρέπει την υλοποίηση του δικτύου για όλες αυτές τις οικογένειες. Για το επίπεδο  σύνδεσης δεδομένων (OSI 2) σχεδιάστηκε και υλοποιήθηκε πρωτόκολλο τύπου δακτυλίου με χρήση σκυτάλης (token ring). Στα πλαίσια της διπλωματικής το πρωτόκολλο υλοποιήθηκε για μικροελεγκτές AVR και για προσωπικό υπολογιστή.
    </p>

    <p>
    Το γεγονός ότι το πρωτόκολλο υλοποιήθηκε τόσο για μικροελεγκτές όσο και για υπολογιστή, κάνει δυνατή την διασύνδεση των δύο παραπάνω σε κοινό δίκτυο. Σε συνδυασμό με την προγραμματιστική διεπαφή (API) που παρέχεται στους χρήστες διευκολύνεται σε μεγάλο βαθμό η ανάπτυξη δικτυακών εφαρμογών μικροελεγκτών κάνοντας χρήση του υπολογιστή σαν εργαλείο προγραμματισμού, αποσφαλμάτωσης αλλά και διασύνδεσης του χρήστη με τους μικροελεγκτές.
    </p>

    <p>
    Κατά την διαδικασία ανάπτυξης μιας εφαρμογής που στηρίζεται στην επικοινωνία των κόμβων ενός δικτύου, απαιτείται ο συνεχής προγραμματισμός κάθε κόμβου. Με τις συμβατικές μεθόδους προγραμματισμού, η συσκευή προγραμματισμού πρέπει να συνδεθεί σε κάθε έναν από τους κόμβους που απαρτίζουν το δίκτυο. Ο χρόνος που απαιτείται για αυτή την διαδικασία αυξάνεται γραμμικά καθώς αυξάνεται ο αριθμός των κόμβων του δικτύου. Αυτός ο χρόνος εξαλείφεται με χρήση ενός bootloader που βασίζεται στο δίκτυο για την επικοινωνία και τον προγραμματισμό των κόμβων. Ο προγραμματισμός με τον bootloader, σε αντίθεση με τις άλλες μεθόδους, δεν απαιτεί από πλευράς συνδεσμολογίας τίποτα περισσότερο από την ίδια την υποδομή του δικτύου.
    </p>

    <p>
    Στα πλαίσια αυτής της διπλωματικής, αξιοποιήθηκε το πρωτόκολλο που υλοποιήθηκε παραπάνω, για την ανάπτυξη ενός δικτυακού bootloader για μικροελεγκτές AVR. Ο προγραμματισμός εκτελείται από εφαρμογή προσωπικού υπολογιστή που αναπτύχθηκε επίσης στα πλαίσια αυτής της διπλωματικής, με την οποία ο χρήστης μπορεί να προγραμματίσει τους μικροελεγκτές του δικτύου, αλλά και να αλληλεπιδράσει με αυτούς γενικότερα.
    </p>

    <div class="links">
        <ul>
            <li><a href="https://github.com/chrispap/TKN" > View on GitHub <i class="icon-github"></i> </a> </li>
        </ul>
    </div>

</div>
